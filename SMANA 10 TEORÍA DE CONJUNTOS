using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using iTextSharp.text;
using iTextSharp.text.pdf;

// Definición de la clase Ciudadano para una mejor organización de los datos.
public class Ciudadano
{
    public string NombreCompleto { get; set; }

    public Ciudadano(string nombreCompleto)
    {
        NombreCompleto = nombreCompleto;
    }

    // Sobrescribimos Equals y GetHashCode para que las operaciones de conjuntos funcionen correctamente.
    public override bool Equals(object obj)
    {
        return obj is Ciudadano otroCiudadano &&
               NombreCompleto == otroCiudadano.NombreCompleto;
    }

    public override int GetHashCode()
    {
        return NombreCompleto.GetHashCode();
    }
}

// Clase para generar el reporte PDF.
public class ReportePDF
{
    private readonly string nombreArchivo;

    public ReportePDF(string nombreArchivo = "Reporte_Vacunacion.pdf")
    {
        this.nombreArchivo = nombreArchivo;
    }

    public void Generar(
        HashSet<Ciudadano> noVacunados,
        HashSet<Ciudadano> vacunadosAmbasDosis,
        HashSet<Ciudadano> vacunadosSoloPfizer,
        HashSet<Ciudadano> vacunadosSoloAstraZeneca)
    {
        using (var doc = new Document())
        {
            using (var writer = PdfWriter.GetInstance(doc, new FileStream(nombreArchivo, FileMode.Create)))
            {
                doc.Open();

                AgregarTitulo(doc, "Reporte de Campaña de Vacunación COVID-19");
                AgregarSeccion(doc, "Ciudadanos que no se han vacunado", noVacunados);
                AgregarSeccion(doc, "Ciudadanos que han recibido ambas dosis", vacunadosAmbasDosis);
                AgregarSeccion(doc, "Ciudadanos que solo han recibido la vacuna de Pfizer", vacunadosSoloPfizer);
                AgregarSeccion(doc, "Ciudadanos que solo han recibido la vacuna de AstraZeneca", vacunadosSoloAstraZeneca);

                doc.Close();
            }
        }
    }

    private void AgregarTitulo(Document doc, string titulo)
    {
        var fontTitulo = new Font(Font.FontFamily.HELVETICA, 16, Font.BOLD);
        doc.Add(new Paragraph(titulo, fontTitulo));
        doc.Add(new Paragraph("\n\n"));
    }

    private void AgregarSeccion(Document doc, string titulo, HashSet<Ciudadano> listaCiudadanos)
    {
        var fontSubtitulo = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
        doc.Add(new Paragraph(titulo, fontSubtitulo));
        doc.Add(new Paragraph("\n"));

        foreach (var ciudadano in listaCiudadanos)
        {
            doc.Add(new Paragraph($"- {ciudadano.NombreCompleto}"));
        }
        doc.Add(new Paragraph("\n"));
    }
}

// Clase principal del programa.
class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Generando datos de la campaña de vacunación...");

        // Generamos los conjuntos de ciudadanos.
        var todosCiudadanos = GenerarCiudadanos(500, "Ciudadano");
        var vacunadosPfizer = GenerarCiudadanos(75, "Pfizer");
        var vacunadosAstraZeneca = GenerarCiudadanos(75, "AstraZeneca");

        // Realizamos las operaciones de conjuntos.
        var vacunadosAmbasDosis = new HashSet<Ciudadano>(vacunadosPfizer.Intersect(vacunadosAstraZeneca));
        var vacunadosSoloPfizer = new HashSet<Ciudadano>(vacunadosPfizer.Except(vacunadosAstraZeneca));
        var vacunadosSoloAstraZeneca = new HashSet<Ciudadano>(vacunadosAstraZeneca.Except(vacunadosPfizer));
        var noVacunados = new HashSet<Ciudadano>(todosCiudadanos.Except(vacunadosPfizer).Except(vacunadosAstraZeneca));

        Console.WriteLine("Generando reporte PDF...");

        // Generamos el reporte PDF usando la clase especializada.
        var generadorPDF = new ReportePDF();
        generadorPDF.Generar(noVacunados, vacunadosAmbasDosis, vacunadosSoloPfizer, vacunadosSoloAstraZeneca);

        Console.WriteLine("¡Reporte 'Reporte_Vacunacion.pdf' generado exitosamente!");
    }

    // Método para generar datos ficticios de ciudadanos.
    private static HashSet<Ciudadano> GenerarCiudadanos(int cantidad, string prefijo)
    {
        var ciudadanos = new HashSet<Ciudadano>();
        for (int i = 1; i <= cantidad; i++)
        {
            ciudadanos.Add(new Ciudadano($"{prefijo} {i}"));
        }
        return ciudadanos;
    }
}
